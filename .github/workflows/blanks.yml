name: Manage Neon Database

on:
  push:
    branches:
      - main

jobs:
  create-db:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js (using the latest LTS version)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Install Neon CLI
      - name: Install Neon CLI
        run: npm install -g neonctl

      # Install PostgreSQL Client
      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      # Install jq for JSON parsing
      - name: Install jq
        run: sudo apt-get install -y jq

      # Create or use the 'development' branch on Neon
      - name: Create Neon Branch
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        run: |
          echo "Creating or using the branch named 'development2'..."
          neon branches create --project-id ${{ secrets.NEON_PROJECT_ID }} --name development2 || echo "Branch 'development2' already exists."

      # Retrieve connection details for the development branch
      - name: Get Branch Details
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        id: get-branch
        run: |
          neon branches get --project-id ${{ secrets.NEON_PROJECT_ID }} --name development2 --output json > branch-info.json
          DB_HOST=$(jq -r '.branch_proxy_host' branch-info.json)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

      # Check if the 'ecommerce' database exists, if not, create it
      - name: Create Neon Database if not exists
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
        run: |
          echo "Checking if database 'ecommerce' exists..."
          DB_EXISTS=$(psql "postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}/ecommerce" -tAc "SELECT 1 FROM pg_database WHERE datname='ecommerce'")
          if [ "$DB_EXISTS" != "1" ]; then
            echo "Creating database 'ecommerce'..."
            psql "postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}/ecommerce" -c "CREATE DATABASE ecommerce;"
          else
            echo "Database 'ecommerce' already exists."
          fi

      # Test the connection to the 'ecommerce' database
      - name: Test Connection
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
        run: |
          echo "Testing the connection to the 'ecommerce' database..."
          psql "postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}/ecommerce" -c "SELECT 'Connection successful!'"

      # Optionally, run SQL commands (create tables, etc.)
      - name: Run SQL Commands
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
        run: |
          echo "Running SQL commands..."
          psql "postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}/ecommerce" -c "CREATE TABLE IF NOT EXISTS products (id SERIAL PRIMARY KEY, name VARCHAR(100), price DECIMAL(10, 2));"
