name: Manage Neon Database

# This workflow triggers on every push to the "main" branch
on:
  push:
    branches:
      - main

jobs:
  create-db:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js (using the latest LTS version)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20" # Updated to Node.js 20 as required

      # Install Neon CLI
      - name: Install Neon CLI
        run: npm install -g neonctl

      # Install PostgreSQL Client
      - name: Install PostgreSQL Client
        run: sudo apt-get install -y postgresql-client

      # Create the branch and the database on Neon
      - name: Create Neon Database
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
        run: |
          # Create a new branch and database on Neon
          neonctl create-branch --project-id ${{ secrets.NEON_PROJECT_ID }} --branch-name development
          neonctl create-database --project-id ${{ secrets.NEON_PROJECT_ID }} --branch-name development --database-name ecommerce

      # Test the connection to the database
      - name: Test Connection
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}  # Add your DB username to secrets
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Add your DB password to secrets
          DB_HOST: ${{ secrets.DB_HOST }}  # Add your DB host to secrets
        run: |
          psql "postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}/ecommerce" -c "SELECT 'Connection successful!'"

      # Optionally, run SQL commands (create tables, etc.)
      - name: Run SQL Commands
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          psql "postgresql://${{ env.DB_USERNAME }}:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}/neondb" -c "CREATE TABLE products (id SERIAL PRIMARY KEY, name VARCHAR(100), price DECIMAL(10, 2));"
